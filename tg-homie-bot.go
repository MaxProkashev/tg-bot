package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/go-telegram-bot-api/telegram-bot-api"

	_ "github.com/heroku/x/hmetrics/onload"
	_ "github.com/lib/pq"
)

type hookConfig struct {
	updateID int
	chatID   int64
	userID   int

	hasText     bool
	hasPhoto    bool
	hasCallback bool

	inTable bool
	status  string
}

var (
	// bot
	bot      *tgbotapi.BotAPI
	botToken = "1043743898:AAFLHzukT06kDialBm0XcNJREFjEYf10ErM"
	baseURL  = "https://tg-homie-bot.herokuapp.com/"

	// DB
	dbURI = "postgres://tkkghsfsvqtsdd:0a879d2b89e3cd6b7fbd4f827cfa8eb5dfabd938aefe0e519c3efd1e10255bdd@ec2-18-232-143-90.compute-1.amazonaws.com:5432/d6372psrheqgci"
	db, _ = sql.Open("postgres", dbURI)
)

// –ü–∞—Ä—Å–µ—Ä Update
func parseUpdate(update tgbotapi.Update) hookConfig {
	if update.CallbackQuery != nil {
		hook := hookConfig{
			updateID:    update.UpdateID,
			hasCallback: true,
			hasPhoto:    false,
			hasText:     false,
			chatID:      update.CallbackQuery.Message.Chat.ID,
			userID:      update.CallbackQuery.From.ID,
		}
		return hook
	} else if update.Message != nil {
		if update.Message.Photo != nil {
			hook := hookConfig{
				updateID:    update.UpdateID,
				hasCallback: false,
				hasPhoto:    true,
				hasText:     false,
				chatID:      update.Message.Chat.ID,
				userID:      update.Message.From.ID,
			}
			return hook
		}
		hook := hookConfig{
			updateID:    update.UpdateID,
			hasCallback: false,
			hasPhoto:    false,
			hasText:     true,
			chatID:      update.Message.Chat.ID,
			userID:      update.Message.From.ID,
		}
		return hook

	}

	hook := hookConfig{
		updateID:    update.UpdateID,
		hasCallback: false,
		hasPhoto:    false,
		hasText:     false,
		chatID:      update.Message.Chat.ID,
		userID:      update.Message.From.ID,
	}
	return hook
}

// menu
func menuBot() interface{} {
	return tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
				tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã"),
				tgbotapi.NewKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
				tgbotapi.NewKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫"),
			),
		},
		OneTimeKeyboard: true,
		ResizeKeyboard:  true,
	}
}

// –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func logicReg(hook hookConfig, update tgbotapi.Update) {
	switch hook.status {
	case "reg1": // name
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "reg2")
			setText(db, "bot_user", hook.userID, "name", update.Message.Text)
			bot.Send(tgbotapi.NewMessage(hook.chatID, "Ok, –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è?"))
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	case "reg2": // surname
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "reg3")
			setText(db, "bot_user", hook.userID, "surname", update.Message.Text)
			bot.Send(tgbotapi.NewMessage(hook.chatID, "Ok, –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑ –≤ –ø—Ä–æ—Ñ–∏–ª—å"))
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	case "reg3": // img
		switch hook.hasPhoto {
		case true:
			newStatus(db, hook.userID, "reg4")
			setText(db, "bot_user", hook.userID, "img", (*update.Message.Photo)[0].FileID)

			msg := tgbotapi.NewMessage(hook.chatID, "Ok, –í—ã —É—á–∏—Ç–µ—Å—å?")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–í —à–∫–æ–ª–µ", "–í —à–∫–æ–ª–µ"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–í –∫–æ–ª–ª–µ–¥–∂–µ", "–í –∫–æ–ª–ª–µ–¥–∂–µ"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ", "–í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–ù–µ—Ç"),
				),
			)
			bot.Send(msg)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑?"))
		}
	case "reg4": //study
		switch hook.hasCallback {
		case true:
			switch update.CallbackQuery.Data {
			case "–í —à–∫–æ–ª–µ":
				newStatus(db, hook.userID, "reg4school")
				msg := tgbotapi.NewMessage(hook.chatID, "–ö–∞–∫–æ–π –∫–ª–∞—Å—Å?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞", "–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("5", "5"),
						tgbotapi.NewInlineKeyboardButtonData("6", "6"),
						tgbotapi.NewInlineKeyboardButtonData("7", "7"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("8", "8"),
						tgbotapi.NewInlineKeyboardButtonData("9", "9"),
						tgbotapi.NewInlineKeyboardButtonData("10", "10"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("11", "11"),
					),
				)
				bot.Send(msg)
			case "–í –∫–æ–ª–ª–µ–¥–∂–µ":
				newStatus(db, hook.userID, "reg4college")
				msg := tgbotapi.NewMessage(hook.chatID, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("1", "1"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("2", "2"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("3", "3"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("4", "4"),
					),
				)
				bot.Send(msg)
			case "–í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ":
				newStatus(db, hook.userID, "reg4univer")
				msg := tgbotapi.NewMessage(hook.chatID, "–ö–∞–∫–æ–π –∫—É—Ä—Å?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("1", "1"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("2", "2"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("3", "3"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("4", "4"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("5", "5"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("6", "6"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"),
					),
				)
				bot.Send(msg)
			case "–ù–µ—Ç":
				newStatus(db, hook.userID, "reg5")
				setText(db, "bot_user", hook.userID, "study", "–Ω–µ —É—á–∏—Ç—Å—è")
				msg := tgbotapi.NewMessage(hook.chatID, "Ok, –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–î–∞", "–î–∞"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–ù–µ—Ç"),
					),
				)
				bot.Send(msg)
			default:
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
			}
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
		}
	case "reg4school":
		switch hook.hasCallback {
		case true:
			switch update.CallbackQuery.Data {
			case "–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞":
				newStatus(db, hook.userID, "reg4schoolnum")
				setText(db, "bot_user", hook.userID, "temp", "–Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã"))
			default:
				newStatus(db, hook.userID, "reg4schoolnum")
				setText(db, "bot_user", hook.userID, "temp", update.CallbackQuery.Data+" –∫–ª–∞—Å—Å")
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã"))
			}
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
		}
	case "reg4schoolnum":
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "reg5")
			temp := getText(db, "bot_user", hook.userID, "temp")
			setText(db, "bot_user", hook.userID, "study", "—à–∫–æ–ª–∞ "+update.Message.Text+" "+temp)

			msg := tgbotapi.NewMessage(hook.chatID, "Ok, –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–î–∞", "–î–∞"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–ù–µ—Ç"),
				),
			)
			bot.Send(msg)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	case "reg4college":
		switch hook.hasCallback {
		case true:
			newStatus(db, hook.userID, "reg4collegenum")
			setText(db, "bot_user", hook.userID, "temp", update.CallbackQuery.Data+" –∫—É—Ä—Å")
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–¥–∂–∞"))
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
		}
	case "reg4collegenum":
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "reg5")
			temp := getText(db, "bot_user", hook.userID, "temp")
			setText(db, "bot_user", hook.userID, "study", update.Message.Text+" "+temp)

			msg := tgbotapi.NewMessage(hook.chatID, "Ok, –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–î–∞", "–î–∞"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–ù–µ—Ç"),
				),
			)
			bot.Send(msg)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	case "reg4univer":
		switch hook.hasCallback {
		case true:
			switch update.CallbackQuery.Data {
			case "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
				newStatus(db, hook.userID, "reg4univernum")
				setText(db, "bot_user", hook.userID, "temp", "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?"))
			default:
				newStatus(db, hook.userID, "reg4univernum")
				setText(db, "bot_user", hook.userID, "temp", update.CallbackQuery.Data+" –∫—É—Ä—Å")
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?"))
			}
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
		}
	case "reg4univernum":
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "reg5")
			temp := getText(db, "bot_user", hook.userID, "temp")
			setText(db, "bot_user", hook.userID, "study", update.Message.Text+" "+temp)

			msg := tgbotapi.NewMessage(hook.chatID, "Ok, –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–î–∞", "–î–∞"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–ù–µ—Ç"),
				),
			)
			bot.Send(msg)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	case "reg5": //work
		switch hook.hasCallback {
		case true:
			switch update.CallbackQuery.Data {
			case "–î–∞":
				newStatus(db, hook.userID, "reg5work")
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–ö–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"))
			case "–ù–µ—Ç":
				newStatus(db, hook.userID, "menu")
				setText(db, "bot_user", hook.userID, "work", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

				menu := tgbotapi.NewMessage(hook.chatID, "–£—Ä–∞! –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ üåê")
				menu.ReplyMarkup = menuBot()
				bot.Send(menu)
			default:
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
			}
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
		}
	case "reg5work":
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "menu")
			setText(db, "bot_user", hook.userID, "work", update.Message.Text)

			menu := tgbotapi.NewMessage(hook.chatID, "–£—Ä–∞! –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ üåê")
			menu.ReplyMarkup = menuBot()
			bot.Send(menu)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üìù"))
		}
	}
}

// –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏
func logicAsk(hook hookConfig, update tgbotapi.Update) {
	id := getInt(db, "bot_user", hook.userID, "lastask")
	switch hook.status {
	case "ask1": // theme
		switch hook.hasCallback {
		case true:
			newStatus(db, hook.userID, "ask2")
			setText(db, "asking", id, "theme", update.CallbackQuery.Data)
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–ù–µ–º–Ω–æ–≥–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É"))
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"))
		}
	case "ask2": // info
		switch hook.hasText {
		case true:
			newStatus(db, hook.userID, "menu")
			setText(db, "asking", id, "info", update.Message.Text)

			time := time.Unix(int64(update.Message.Date), 0).Add(3 * time.Hour)
			setText(db, "asking", id, "date", strconv.Itoa(time.Day())+" "+time.Month().String()+" "+strconv.Itoa(time.Hour())+":"+strconv.Itoa(time.Minute()))

			menu := tgbotapi.NewMessage(hook.chatID, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
			menu.ReplyMarkup = menuBot()
			bot.Send(menu)
		default:
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç"))
		}
	}
}

// –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏
func logicSearch(hook hookConfig, update tgbotapi.Update) {
	flag := false
	id := getInt(db, "bot_user", hook.userID, "lastask")
	rows, err := db.Query("SELECT iduser,id,idsolv,date,theme,info FROM asking WHERE id <> " + strconv.Itoa(id) + " AND idsolv = 0 AND iduser <> " + strconv.Itoa(hook.userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select %d. Reason: %s", hook.userID, err.Error())
	} else {
		for rows.Next() {
			var (
				iduser int
				id     int
				idsolv int
				date   string
				theme  string
				info   string
			)
			rows.Scan(&iduser, &id, &idsolv, &date, &theme, &info)
			setInt(db, "bot_user", hook.userID, "lastask", id)

			name := getText(db, "bot_user", iduser, "name")
			surname := getText(db, "bot_user", iduser, "surname")
			study := getText(db, "bot_user", iduser, "study")
			work := getText(db, "bot_user", iduser, "work")

			text := fmt.Sprintf(
				"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º –∫—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É:*\n"+
					"%s %s\n"+
					"*–ú–µ—Å—Ç–æ —É—á–µ–±—ã:* %s\n"+
					"*–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:* %s\n\n"+
					"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:*\n"+
					"*–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:* %s\n"+
					"*–¢–µ–º–∞:* %s\n"+
					"*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n",
				name,
				surname,
				study,
				work,
				date,
				theme,
				info,
			)

			NextEnd := tgbotapi.NewMessage(hook.chatID, text)
			NextEnd.ParseMode = tgbotapi.ModeMarkdown
			keyboard := tgbotapi.InlineKeyboardMarkup{}
			var row []tgbotapi.InlineKeyboardButton
			row = append(row, tgbotapi.NewInlineKeyboardButtonData("–í–∑—è—Ç—å", "–í–∑—è—Ç—å"))
			row = append(row, tgbotapi.NewInlineKeyboardButtonData("–ó–∞–∫–æ–Ω—á–∏—Ç—å", "–ó–∞–∫–æ–Ω—á–∏—Ç—å"))
			row = append(row, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∞—è", "–°–ª–µ–¥—É—é—â–∞—è"))
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
			NextEnd.ReplyMarkup = keyboard
			bot.Send(NextEnd)
			flag = true
			return
		}
		if flag == false {
			newStatus(db, hook.userID, "menu")
			msg := tgbotapi.NewMessage(hook.chatID, "–°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å")
			msg.ReplyMarkup = menuBot()
			bot.Send(msg)
			return
		}
	}
}

func logicTake(hook hookConfig, update tgbotapi.Update) {
	id := getInt(db, "bot_user", hook.userID, "lastask")
	setInt(db, "asking", id, "idsolv", hook.userID)
}

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func userProfile(hook hookConfig, update tgbotapi.Update) {
	name := getText(db, "bot_user", hook.userID, "name")
	surname := getText(db, "bot_user", hook.userID, "surname")
	study := getText(db, "bot_user", hook.userID, "study")
	work := getText(db, "bot_user", hook.userID, "work")

	text := fmt.Sprintf(
		"*%s %s*\n"+
			"*–ú–µ—Å—Ç–æ —É—á–µ–±—ã:* %s\n"+
			"*–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:* %s\n",
		name, surname,
		study,
		work,
	)
	menu := tgbotapi.NewMessage(hook.chatID, text)
	menu.ReplyMarkup = menuBot()
	menu.ParseMode = tgbotapi.ModeMarkdown

	img := tgbotapi.NewPhotoShare(hook.chatID, getText(db, "bot_user", hook.userID, "img"))

	bot.Send(img)
	bot.Send(menu)
}

// –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func userAsk(hook hookConfig, update tgbotapi.Update) {
	//name := getText(db, "bot_user", hook.userID, "name")
	//surname := getText(db, "bot_user", hook.userID, "surname")
	//study := getText(db, "bot_user", hook.userID, "study")
	//work := getText(db, "bot_user", hook.userID, "work")

	flag := false
	rows, err := db.Query("SELECT idsolv,date,theme,info FROM asking WHERE iduser = " + strconv.Itoa(hook.userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select %d. Reason: %s", hook.userID, err.Error())
	} else {
		for rows.Next() {
			var (
				idsolv int
				date   string
				theme  string
				info   string
			)
			rows.Scan(&idsolv, &date, &theme, &info)
			text := fmt.Sprintf(
				"*–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:* %s\n"+
					"*–¢–µ–º–∞:* %s\n"+
					"*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n",
				date,
				theme,
				info,
			)
			if idsolv != 0 {
				text = text + "\n*–ó–∞—è–≤–∫—É –≤–∑—è–ª:* " + strconv.Itoa(idsolv)
			} else {
				text = text + "\n*–ó–∞—è–≤–∫—É –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª*"
			}

			ask := tgbotapi.NewMessage(hook.chatID, text)
			ask.ParseMode = tgbotapi.ModeMarkdown
			ask.ReplyMarkup = menuBot()
			flag = true
			bot.Send(ask)
		}
		if flag == false {
			msg := tgbotapi.NewMessage(hook.chatID, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
			msg.ReplyMarkup = menuBot()
			bot.Send(msg)
			return
		}
	}
}

// –ó–∞—è–≤–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func userSolv(hook hookConfig, update tgbotapi.Update) {
	flag := false
	rows, err := db.Query("SELECT iduser,id,date,theme,info FROM asking WHERE idsolv = " + strconv.Itoa(hook.userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select %d. Reason: %s", hook.userID, err.Error())
	} else {
		for rows.Next() {
			var (
				iduser int
				id     int
				idsolv int
				date   string
				theme  string
				info   string
			)
			rows.Scan(&iduser, &id, &idsolv, &date, &theme, &info)

			name := getText(db, "bot_user", iduser, "name")
			surname := getText(db, "bot_user", iduser, "surname")
			study := getText(db, "bot_user", iduser, "study")
			work := getText(db, "bot_user", iduser, "work")

			text := fmt.Sprintf(
				"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º –∫—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É*\n"+
					"%s %s\n"+
					"*–ú–µ—Å—Ç–æ —É—á–µ–±—ã:* %s\n"+
					"*–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:* %s\n\n"+
					"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:*\n"+
					"*–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:* %s\n"+
					"*–¢–µ–º–∞:* %s\n"+
					"*–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n",
				name,
				surname,
				study,
				work,
				date,
				theme,
				info,
			)

			ask := tgbotapi.NewMessage(hook.chatID, text)
			ask.ParseMode = tgbotapi.ModeMarkdown
			ask.ReplyMarkup = menuBot()
			flag = true
			bot.Send(ask)
		}
		if flag == false {
			msg := tgbotapi.NewMessage(hook.chatID, "–í—ã –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏")
			msg.ReplyMarkup = menuBot()
			bot.Send(msg)
			return
		}
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ä—É—á–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
func webhookHandler(c *gin.Context) {
	defer c.Request.Body.Close()

	// –ß—Ç–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
	bytes, err := ioutil.ReadAll(c.Request.Body)
	if err != nil {
		log.Fatalf("[X] Could not read request. Reason: %s", err.Error())
		return
	}

	// Update
	var update tgbotapi.Update
	err = json.Unmarshal(bytes, &update)
	if err != nil {
		log.Fatalf("[X] Could not unmarshal updates. Reason: %s", err.Error())
		return
	}
	//
	//
	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–∞ –æ–± update
	hook := parseUpdate(update)
	hook.inTable = checkUserID(db, hook.userID)
	//
	// –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if hook.inTable == true {
		hook.status = getText(db, "bot_user", hook.userID, "status")

		if strings.HasPrefix(hook.status, "reg") {
			logicReg(hook, update)
		}
		if strings.HasPrefix(hook.status, "ask") {
			logicAsk(hook, update)
		}
		if strings.HasPrefix(hook.status, "search") {
			switch hook.hasCallback {
			case true:
				if update.CallbackQuery.Data == "–ó–∞–∫–æ–Ω—á–∏—Ç—å" {
					newStatus(db, hook.userID, "menu")
					menu := tgbotapi.NewMessage(hook.chatID, "Ok")
					menu.ReplyMarkup = menuBot()
					bot.Send(menu)
				} else if update.CallbackQuery.Data == "–°–ª–µ–¥—É—é—â–∞—è" {
					logicSearch(hook, update)
				} else if update.CallbackQuery.Data == "–í–∑—è—Ç—å" {
					logicTake(hook, update)
					bot.Send(tgbotapi.NewMessage(hook.chatID, "–ó–∞—è–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞"))
					logicSearch(hook, update)
				}
			default:
				bot.Send(tgbotapi.NewMessage(hook.chatID, "–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"))
			}
		}

		if hook.status == "menu" {
			if hook.hasText == false {
				menu := tgbotapi.NewMessage(hook.chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –º–µ–Ω—é")
				menu.ReplyMarkup = menuBot()
				bot.Send(menu)
			} else {
				switch update.Message.Text {
				case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
					userProfile(hook, update)
				case "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
					deleteUser(db, hook.userID)
					bot.Send(tgbotapi.NewMessage(hook.chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤–≤–µ–¥–∏—Ç–µ /start"))
				case "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
					choosetheme := tgbotapi.NewMessage(hook.chatID, "–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏")
					choosetheme.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
						),
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞"),
						),
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"),
						),
					)
					bot.Send(choosetheme)
					newStatus(db, hook.userID, "ask1")
					newAsk(db, hook.userID, hook.updateID)
				case "–ú–æ–∏ –∑–∞—è–≤–∫–∏":
					userAsk(hook, update)
				case "–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã":
					userSolv(hook, update)
				case "–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫":
					newStatus(db, hook.userID, "search")
					logicSearch(hook, update)
				default:
					menu := tgbotapi.NewMessage(hook.chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –º–µ–Ω—é")
					menu.ReplyMarkup = menuBot()
					bot.Send(menu)
				}
			}
		}

	}
	//
	// –õ–æ–≥–∏–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if hook.inTable == false {
		if hook.hasText == false {
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"))
		} else if update.Message.Command() == "start" {
			// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			htmlText := "(–ü—Ä–∏–¥—É–º–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)"
			msg := tgbotapi.NewMessage(hook.chatID, htmlText)
			msg.ParseMode = tgbotapi.ModeMarkdown
			bot.Send(msg)

			// new id
			newID(db, hook.userID)
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?"))

		} else {
			bot.Send(tgbotapi.NewMessage(hook.chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"))
		}
	}

}

// telegram api
func initTelegram() {
	var err error

	// –†–æ–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ botToken
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("[X] Could not create bot. Reason: %s", err.Error())
		return
	}

	// –î–∞–µ–º –±–æ—Ç—É —É—Ä–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	url := baseURL + bot.Token
	_, err = bot.SetWebhook(tgbotapi.NewWebhook(url))
	if err != nil {
		log.Fatalf("[X] Could not set webhook to bot settings. Reason: %s", err.Error())
	}
}

// MAIN
//
func main() {
	var err error

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
	port := os.Getenv("PORT")

	if port == "" {
		log.Fatal("[X] $PORT must be set")
	} else {
		log.Printf("[OK] Get PORT = %s", port)
	}

	// gin router –∑–∞–ø—É—Å–∫
	gin.SetMode(gin.ReleaseMode)
	router := gin.New()
	router.Use(gin.Recovery())

	// DB –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	/*
		db, err = sql.Open("postgres", dbURI)
		if err != nil {
			log.Fatalf("[X] Could not connect to DB. Reason: %s", err.Error())
		} else {
			log.Printf("[OK] Connect DB")
		}
		defer db.Close()
	*/

	// –¢–∞–±–ª–∏—Ü–∞ —É—á–∏—Ç–µ–ª–µ–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç—Å—è

	//truncateTable(db, "bot_user")				// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π != –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
	//truncateTable(db, "asking")
	//
	//dropTable(db, "bot_user") // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
	//dropTable(db, "asking")
	//
	//time.Sleep(2 * time.Second) // –°–ø—è—á–∫–∞ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥
	//
	createTable(db, "bot_user")
	createTable(db, "asking")

	// telegram api
	initTelegram()
	router.POST("/"+bot.Token, webhookHandler) // –•—É–∫–∏ api —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –æ–±—Ö–æ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ heroku

	err = router.Run(":" + port) // –°–ª—É—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
	if err != nil {
		log.Fatalf("[X] Could not run router. Reason: %s", err.Error())
	}
}

// –ù–ò–ñ–ï –ò–î–£–¢ –í–°–ï –§–£–ù–ö–¶–ò–ò –° DB

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
//
// bot_user(id INT PRIMARY KEY,name TEXT,surname TEXT,img TEXT,study TEXT,work TEXT,status TEXT,lastask INT,temp TEXT)
//
// asking(iduser INT,id INT PRIMARY KEY,idsolv INT,date TEXT,theme TEXT,info TEXT)
func createTable(db *sql.DB, name string) {
	if name == "bot_user" {
		_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + name + " (id INT PRIMARY KEY,name TEXT,surname TEXT,img TEXT,study TEXT,work TEXT,status TEXT,lastask INT,temp TEXT);")
		if err != nil {
			log.Fatalf("[X] Could not create %s table. Reason: %s", name, err.Error())
		} else {
			log.Printf("[OK] Create %s table", name)
		}
	} else if name == "asking" {
		_, err := db.Exec("CREATE TABLE IF NOT EXISTS " + name + " (iduser INT,id INT PRIMARY KEY,idsolv INT,date TEXT,theme TEXT,info TEXT);")
		if err != nil {
			log.Fatalf("[X] Could not create %s table. Reason: %s", name, err.Error())
		} else {
			log.Printf("[OK] Create %s table", name)
		}
	} else {
		log.Printf("[ERR] Wrong %s table DB", name)
	}
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
func dropTable(db *sql.DB, name string) {
	_, err := db.Exec("DROP TABLE " + name + ";")
	if err != nil {
		log.Fatalf("[X] Could not drop %s table. Reason: %s", name, err.Error())
	} else {
		log.Printf("[OK] Drop %s table", name)
	}
}

// –°–±—Ä–æ—Å —Ç–∞–±–ª–∏—Ü—ã
func truncateTable(db *sql.DB, name string) {
	_, err := db.Exec("TRUNCATE TABLE " + name + ";")
	if err != nil {
		log.Fatalf("[X] Could not truncate %s table. Reason: %s", name, err.Error())
	} else {
		log.Printf("[OK] Truncate %s table", name)
	}
}

// –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π int, text
// –í table –¥–ª—è userID –≤ –∫–æ–ª–æ–Ω–∫—É column –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç value
// –î–æ—Å—Ç–∞—Ç—å column –∏–∑ table –¥–ª—è userID
func setText(db *sql.DB, table string, userID int, column string, value string) {
	_, err := db.Exec("UPDATE " + table + " SET " + column + " = '" + value + "' WHERE id = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could no update %d. Reason: %s", userID, err.Error())
	} /*else {
		log.Printf("[OK] User %d update", userID)
	}*/
}
func getText(db *sql.DB, table string, userID int, column string) (value string) {
	rows, err := db.Query("SELECT " + column + " FROM " + table + " WHERE id = " + strconv.Itoa(userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select %d. Reason: %s", userID, err.Error())
	} else {
		for rows.Next() {
			rows.Scan(&value)
		}
	}
	return value
}
func setInt(db *sql.DB, table string, userID int, column string, value int) {
	_, err := db.Exec("UPDATE " + table + " SET " + column + " = " + strconv.Itoa(value) + " WHERE id = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not update %d. Reason: %s", userID, err.Error())
	} /*else {
		log.Printf("[OK] User %d update", userID)
	}*/
}
func getInt(db *sql.DB, table string, userID int, column string) (value int) {
	rows, err := db.Query("SELECT " + column + " FROM " + table + " WHERE id = " + strconv.Itoa(userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select %d. Reason: %s", userID, err.Error())
	} else {
		for rows.Next() {
			rows.Scan(&value)
		}
	}
	return value
}

// –õ–æ–≥–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
//
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ id –≤ —Ç–∞–±–ª–∏—Ü–µ bot_user
func checkUserID(db *sql.DB, userID int) bool {
	rows, err := db.Query("SELECT id FROM bot_user WHERE id = " + strconv.Itoa(userID) + ";")
	defer rows.Close()
	if err != nil {
		log.Fatalf("[X] Could not select id. Reason: %s", err.Error())
	} else {
		for rows.Next() {
			return true
		}
		return false
	}
	return false
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
func newStatus(db *sql.DB, userID int, status string) {
	_, err := db.Exec("UPDATE bot_user SET status = '" + status + "' WHERE id = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not update status to %d. Reason: %s", userID, err.Error())
	} /*else {
		log.Printf("[OK] %d update status to %s", userID, status)
	}*/
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func newID(db *sql.DB, userID int) {
	_, err := db.Exec("INSERT INTO bot_user (id,status,lastask) VALUES (" + strconv.Itoa(userID) + ", 'reg1', 0);")
	if err != nil {
		log.Fatalf("[X] Could not insert newID. Reason: %s", err.Error())
	} else {
		log.Printf("[OK] New user %d", userID)
	}
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func deleteUser(db *sql.DB, userID int) {
	_, err := db.Exec("DELETE FROM bot_user WHERE id = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not delete %d from bot_user table. Reason: %s", userID, err.Error())
	} else {
		log.Printf("[OK] Delete user %d", userID)
	}
	_, err = db.Exec("DELETE FROM asking WHERE iduser = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not delete %d from asking table. Reason: %s", userID, err.Error())
	} else {
		log.Printf("[OK] Delete ask %d", userID)
	}
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
func newAsk(db *sql.DB, userID int, askID int) {
	_, err := db.Exec("INSERT INTO asking (iduser,id,idsolv) VALUES (" + strconv.Itoa(userID) + ", " + strconv.Itoa(askID) + ", 0);")
	if err != nil {
		log.Fatalf("[X] Could not create new ask %d. Reason: %s", askID, err.Error())
	} else {
		log.Printf("[OK] New ask %d", askID)
	}

	_, err = db.Exec("UPDATE bot_user SET lastask = " + strconv.Itoa(askID) + " WHERE id = " + strconv.Itoa(userID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not update lastask user %d. Reason: %s", userID, err.Error())
	} /*else {
		log.Printf("[OK] %d update lastask to %d", userID, askID)
	}*/
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
func deleteAsk(db *sql.DB, askID int) {
	_, err := db.Exec("DELETE FROM asking WHERE id = " + strconv.Itoa(askID) + ";")
	if err != nil {
		log.Fatalf("[X] Could not delete %d from asking table. Reason: %s", askID, err.Error())
	} else {
		log.Printf("[OK] Delete ask %d", askID)
	}
}
